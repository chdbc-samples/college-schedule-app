name: Deploy to Azure AKS

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Application version to deploy'
        required: true
        default: 'latest'

env:
  AZURE_RESOURCE_GROUP: college-schedule-rg
  AKS_CLUSTER_NAME: college-schedule-aks
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: college-schedule-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Replace image tags in Kubernetes manifests
        run: |
          # Замінюємо тег образу в deployment файлах
          sed -i "s|{{IMAGE_TAG}}|${{ github.event.inputs.version }}|g" k8s/app-deployment.yml
          sed -i "s|{{GITHUB_OWNER}}|${{ github.repository_owner }}|g" deploy/k8s/app-deployment.yml

      - name: Deploy PostgreSQL
        run: |
          echo "Deploying PostgreSQL..."
          kubectl apply -f deploy/k8s/postgres-deployment.yml
          
          # Чекаємо, поки PostgreSQL буде готовий
          kubectl wait --for=condition=ready pod -l app=postgres --timeout=300s

      - name: Deploy Application
        run: |
          echo "Deploying application..."
          kubectl apply -f deploy/k8s/app-deployment.yml

          # Чекаємо, поки застосунок буде готовий
          kubectl wait --for=condition=ready pod -l app=college-schedule-app --timeout=300s

      - name: Get service information
        run: |
          echo "Getting service information..."
          kubectl get services
          kubectl get pods
          
          # Отримуємо зовнішній IP
          EXTERNAL_IP=$(kubectl get service college-schedule-app --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$EXTERNAL_IP" ]; then
            echo "Application URL: http://$EXTERNAL_IP"
          else
            echo "Waiting for external IP to be assigned..."
          fi

      - name: Health check
        run: |
          echo "Performing health check..."
          # Чекаємо, поки з'явиться зовнішній IP
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get service college-schedule-app --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "External IP found: $EXTERNAL_IP"
              break
            fi
            echo "Waiting for external IP... (attempt $i/30)"
            sleep 10
          done
          
          # Перевіряємо здоров'я застосунку
          if [ -n "$EXTERNAL_IP" ]; then
            curl --fail --silent --show-error --max-time 30 "http://$EXTERNAL_IP/actuator/health" || echo "Health check endpoint not available yet"
          fi

      - name: Show deployment status
        if: always()
        run: |
          echo "=== Deployment Summary ==="
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Version: ${{ github.event.inputs.version }}"
          echo ""
          echo "Pods:"
          kubectl get pods
          echo ""
          echo "Services:"
          kubectl get services
          echo ""
          echo "Deployments:"
          kubectl get deployments