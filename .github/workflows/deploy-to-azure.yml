name: Deploy to Azure AKS

on:
  workflow_dispatch:
    inputs:
      version:
        description: '–í–µ—Ä—Å—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è'
        required: true
        default: '0.3.0-SNAPSHOT'

env:
  AZURE_RESOURCE_GROUP: college-schedule-rg
  AKS_CLUSTER_NAME: college-schedule-aks
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: college-schedule-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—É
        uses: actions/checkout@v4
        
      - name: –í—Ö—ñ–¥ –≤ Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö AKS
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—É –¥–ª—è GHCR
        run: |
          echo "Creating/updating GHCR pull secret..."
          
          # –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–∏–π secret —è–∫—â–æ —î
          kubectl delete secret ghcr-secret --ignore-not-found=true
          
          # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π secret –¥–ª—è GHCR
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=${{ env.CONTAINER_REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          
          echo "‚úÖ GHCR pull secret created successfully"

      - name: –ó–∞–º—ñ–Ω–∞ —Ç–µ–≥—ñ–≤ –æ–±—Ä–∞–∑—ñ–≤ —É –º–∞–Ω—ñ—Ñ–µ—Å—Ç–∞—Ö Kubernetes
        run: |
          echo "Replacing image tags in manifests..."
          
          # –ó–∞–º—ñ–Ω—é—î–º–æ —Ç–µ–≥ –æ–±—Ä–∞–∑—É –≤ deployment —Ñ–∞–π–ª–∞—Ö
          sed -i "s|{{IMAGE_TAG}}|${{ github.event.inputs.version }}|g" deploy/k8s-manifests/app-deployment.yml
          sed -i "s|{{GITHUB_OWNER}}|${{ github.repository_owner }}|g" deploy/k8s-manifests/app-deployment.yml

          # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –∑–∞–º—ñ–Ω–∏–ª–∏
          echo "Final image reference:"
          grep "image:" deploy/k8s-manifests/app-deployment.yml

      - name: –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è PostgreSQL
        run: |
          echo "Deploying PostgreSQL..."
          kubectl apply -f deploy/k8s-manifests/postgres-deployment.yaml
          
          # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ PostgreSQL –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π
          echo "Waiting for PostgreSQL to be ready..."
          kubectl wait --for=condition=ready pod -l app=postgres --timeout=300s
          
          echo "‚úÖ PostgreSQL is ready"

      - name: –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–∞
        run: |
          echo "Deploying application..."
          
          # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
          kubectl delete deployment college-schedule-app --ignore-not-found=true
          
          # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –ø–æ–¥–∏ –∑–Ω–∏–∫–Ω—É—Ç—å
          kubectl wait --for=delete pod -l app=college-schedule-app --timeout=120s || true
          
          # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–æ–≤–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
          kubectl apply -f deploy/k8s-manifests/app-deployment.yml

          # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–∞ –±—É–¥–µ –≥–æ—Ç–æ–≤–∞
          echo "Waiting for application to be ready..."
          kubectl wait --for=condition=ready pod -l app=college-schedule-app --timeout=600s
          
          echo "‚úÖ Application is ready"

      - name: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å–∏
        run: |
          echo "Getting service information..."
          echo ""
          echo "=== –ü–æ–¥–∏ ==="
          kubectl get pods -o wide
          echo ""
          echo "=== –°–µ—Ä–≤—ñ—Å–∏ ==="
          kubectl get services
          echo ""
          echo "=== –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è ==="
          kubectl get deployments
          
          # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π IP
          EXTERNAL_IP=$(kubectl get service college-schedule-app --output jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -n "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
            echo ""
            echo "üåê URL –ø—Ä–æ–≥—Ä–∞–º–∏: http://$EXTERNAL_IP"
          else
            echo ""
            echo "‚è≥ External IP not assigned yet, will check in health check step..."
          fi

      - name: Health check
        run: |
          echo "Performing health check..."
          
          # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –∑'—è–≤–∏—Ç—å—Å—è –∑–æ–≤–Ω—ñ—à–Ω—ñ–π IP
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get service college-schedule-app --output jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
              echo "‚úÖ External IP found: $EXTERNAL_IP"
              echo "üåê Application URL: http://$EXTERNAL_IP"
              
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
              echo "Testing application connectivity..."
              if curl --fail --silent --show-error --max-time 30 "http://$EXTERNAL_IP/" > /dev/null 2>&1; then
                echo "‚úÖ Application is responding!"
              else
                echo "‚ö†Ô∏è  Application not responding yet, but deployment is complete"
              fi
              break
            fi
            echo "Waiting for external IP... (attempt $i/30)"
            sleep 10
          done
          
          if [ -z "$EXTERNAL_IP" ] || [ "$EXTERNAL_IP" == "null" ]; then
            echo "‚ö†Ô∏è  External IP not assigned after 5 minutes"
            echo "You can check later with: kubectl get service college-schedule-app"
          fi

      - name: Show deployment status
        if: always()
        run: |
          echo ""
          echo "=== Final Deployment Summary ==="
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Image: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}"
          echo ""
          echo "=== Pods Status ==="
          kubectl get pods -l app=college-schedule-app -o wide
          echo ""
          echo "=== Pod Logs (last 10 lines) ==="
          kubectl logs -l app=college-schedule-app --tail=10 || echo "No logs available yet"
          echo ""
          echo "=== Service Status ==="
          kubectl get service college-schedule-app
          echo ""
          echo "=== Deployment Status ==="
          kubectl get deployment college-schedule-app
          echo ""
          
          # –ü–æ–∫–∞–∑—É—î–º–æ events —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∏
          if ! kubectl get pods -l app=college-schedule-app --no-headers | grep -q "Running"; then
            echo "=== Recent Events ==="
            kubectl get events --sort-by=.metadata.creationTimestamp --field-selector involvedObject.kind=Pod | tail -10
          fi

      - name: Deployment troubleshooting
        if: failure()
        run: |
          echo ""
          echo "=== Troubleshooting Information ==="
          echo ""
          echo "=== Pod Details ==="
          kubectl describe pods -l app=college-schedule-app
          echo ""
          echo "=== Recent Events ==="
          kubectl get events --sort-by=.metadata.creationTimestamp | tail -20
          echo ""
          echo "=== Deployment Status ==="
          kubectl describe deployment college-schedule-app